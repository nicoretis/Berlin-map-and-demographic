#Removing last row as well since it contains calculations
rawdata <-head(rawdata, -1)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |> rename(Total = `Ins-\r\ngesamt`)
#Looking what postal code are missing on the maps
rawdatapc <- rawdata$Postleitzahl|> unique() #a set of unique postal code for the rawdata tibble
shapefilepc <- posten_sh$plz |> unique() # same but for the shapefile postal codes
#It seems there were duplicates on both postal codes. Three postal codes are still missing on the rawdata postal codes.
#What code are them?
missing_postal_codes<-  setdiff(shapefilepc,rawdatapc)
missing_posten_sh <- filter(
posten_sh, plz %in% missing_postal_codes)
#Since the area covered by those postal codes is very small I can safely ignore them.
ggplot() +
geom_sf(data = missing_posten_sh, size = 1.5, color = "black", fill = "cyan1") +
ggtitle("Missing Population Data For These Postal Codes") +
coord_sf()
#Joining duplicates in the rawdata
rawdata|> filter(duplicated(rawdata$Postleitzahl))
rawdata|> filter(rawdata$Postleitzahl=="10779")
View(rawdata)
rawdata <- bind_cols(first_two_columns, rawdata)|> as_tible()
rawdata <- bind_cols(first_two_columns, rawdata)|> as_tibble()
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Assigning the right numeric type, I am defenitely not happy with this, but I cannot find any better option
first_two_columns<- rawdata|>
select(1:2)
rawdata<-rawdata |>
select(-1,-2) |>
mutate_if(is.character,as.numeric)
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Assigning the right numeric type, I am defenitely not happy with this, but I cannot find any better option
first_two_columns<- rawdata|>
select(1:2)
rawdata<-rawdata |>
select(-1,-2) |>
mutate_if(is.character,as.numeric)
rawdata
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Assigning the right column name
for (i in 1:ncol(rawdata)) {
if (i <= 3 | i == 12) {
col_name <- rawdata[2, i]
} else {
col_name <- rawdata[3, i]
}
colnames(rawdata)[i] <- col_name
}
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Importing the excel file
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Assigning the right column name
for (i in 1:ncol(rawdata)) {
if (i <= 3 | i == 12) {
col_name <- rawdata[2, i]
} else {
col_name <- rawdata[3, i]
}
colnames(rawdata)[i] <- col_name
}
#Removing the first four rows containing columns names
rawdata<- slice(rawdata, -(1:4))
#Removing last row as well since it contains calculations
rawdata <-head(rawdata, -1)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |> rename(Total = `Ins-\r\ngesamt`)
rawdata
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |> rename(Total = `Ins-\r\ngesamt`)
#Renaming "Ins -gesamt" in Total
rawdata <- rename(data=rawdata,Total = `Ins-\r\ngesamt`)
#Renaming "Ins -gesamt" in Total
rename(data=rawdata,Total = `Ins-\r\ngesamt`)
#Renaming "Ins -gesamt" in Total
rename(.data=rawdata, Total = `Ins-\r\ngesamt`)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(Total = `Ins-\r\ngesamt`)
#Importing the excel file
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Importing the excel file
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
pacman::p_load(ggplot2 ,tidyr ,dplyr,tibble, readxl, plyr
)
#Importing the excel file
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Assigning the right column name
for (i in 1:ncol(rawdata)) {
if (i <= 3 | i == 12) {
col_name <- rawdata[2, i]
} else {
col_name <- rawdata[3, i]
}
colnames(rawdata)[i] <- col_name
}
#Removing the first four rows containing columns names
rawdata<- slice(rawdata, -(1:4))
#Removing last row as well since it contains calculations
rawdata <-head(rawdata, -1)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(Total = `Ins-\r\ngesamt`)
View(rawdata)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(Total = `Ins- ngesamt`)
cn()
colnames(rawdata)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(Total = "Ins-\r\ngesamt")
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(DIOMERDA= Bezirk)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(DIOMERDA= `Bezirk`)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
rename(DIOMERDA= `Bezirk`)
colnames(rawdata)
#Renaming "Ins -gesamt" in Total
rawdata <- rawdata |>
mutate(Total = "Ins-\r\ngesamt") |>
select(-"Ins-\r\ngesamt")
colnames(rawdata)
#Assigning the right numeric type, I am definitely not happy with this, but I cannot find any better option
first_two_columns<- rawdata|>
select(1:2)
rawdata<-rawdata |>
select(-1,-2) |>
mutate_if(is.character,as.numeric)
rawdata
rawdata <- bind_cols(first_two_columns, rawdata)|> as_tibble()
#Looking what postal code are missing on the maps
rawdatapc <- rawdata$Postleitzahl|> unique() #a set of unique postal code for the rawdata tibble
rawdatapc
shapefilepc <- posten_sh$plz |> unique() # same but for the shapefile postal codes
#It seems there were duplicates on both postal codes. Three postal codes are still missing on the rawdata postal codes.
#What code are them?
missing_postal_codes<-  setdiff(shapefilepc,rawdatapc)
missing_posten_sh <- filter(
posten_sh, plz %in% missing_postal_codes)
#Since the area covered by those postal codes is very small I can safely ignore them.
ggplot() +
geom_sf(data = missing_posten_sh, size = 1.5, color = "black", fill = "cyan1") +
ggtitle("Missing Population Data For These Postal Codes") +
coord_sf()
#Joining duplicates in the rawdata
rawdata|> filter(duplicated(rawdata$Postleitzahl))
rawdata|> filter(rawdata$Postleitzahl=="10779")
#Those are not mistakes, not all the postal codes are 100% inside a specific district sometimes they may spread in two districts, that's the reason of the duplication.
#For simplicity reasons I'm going to join the duplicates using the row with the greatest population.
df<- rawdata|> as.data.frame()
my_tibble <- rawdata %>%
group_by(Postleitzahl) %>%
mutate_at(vars(3:12), funs(sum)) %>%
distinct()  # Remove duplicate rows
my_tibble
new <-ddply(rawdata,"Postleitzahl",numcolwise(sum))
View(new)
#////////////////////////////////////////////
centroids <- st_centroid(ortsteilen_sh)
pacman::p_load(sf, ggplot2)
pacman::p_load(ggplot2 ,tidyr ,dplyr,tibble,
readxl, conflicted
)
#////////////////////////////////////////////
centroids <- st_centroid(ortsteilen_sh)
# Calculate the average of all centroids
average_centroid <- centroids %>%
st_coordinates() %>%
as.data.frame() %>%
summarise(x = mean(X), y = mean(Y)) %>%
st_as_sf(coords = c("x", "y"))
average_centroid
# Create the ggplot plot
ggplot() +
geom_sf(data = ortsteilen_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids") +
coord_sf()
# Create the ggplot plot
ggplot() +
geom_sf(data = ortsteilen_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids")
# Create the ggplot plot
ggplot() +
geom_sf(data = ortsteilen_sh, size = 1.5, color = "black", fill = "cyan1") +
#geom_sf(data = average_centroid, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids")
centroids
View(centroids)
View(posten_sh)
#////////////////////////////////////////////
centroids <- st_centroid(posten_sh)
View(centroids)
View(centroids)
# Calculate the average of all centroids
average_centroid <- centroids %>%
st_coordinates() %>%
as.data.frame() %>%
summarise(x = mean(X), y = mean(Y)) %>%
st_as_sf(coords = c("x", "y"))
average_centroid
# Calculate the average of all centroids
average_centroid <- centroids %>%
st_coordinates() %>%
as.data.frame() %>%
summarise(x = mean(X), y = mean(Y)) %>%
st_as_sf(coords = c("x", "y"))
average_centroid
# Create the ggplot plot
ggplot() +
geom_sf(data = ortsteilen_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids")
centroids
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = centroids, color = "red", size = 2) +
ggtitle("Berlin Postenzahlen Outline with Centroids") +
coord_sf()
View(centroids)
# Calculate the average of all centroids
average_centroid <- centroids %>%
st_coordinates() %>%
as.data.frame() %>%
summarise(x = mean(X), y = mean(Y)) %>%
st_as_sf(coords = c("x", "y"))
average_centroid
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = centroids, color = "red", size = 2) +
ggtitle("Berlin Postenzahlen Outline with Centroids") +
coord_sf()
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid, color = "red", size = 2) +
ggtitle("Berlin Postenzahlen Outline with Centroids") +
coord_sf()
#////////////////////////////////////////////
st_crs(posten_sh) <- "+proj=longlat +datum=WGS84"
# Calculate the average of all centroids
average_centroid <- centroids %>%
st_coordinates() %>%
as.data.frame() %>%
summarise(x = mean(X), y = mean(Y)) %>%
st_as_sf(coords = c("x", "y"))
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid, color = "red", size = 2) +
ggtitle("Berlin Postenzahlen Outline with Centroids") +
coord_sf()
#////////////////////////////////////////////
st_transform(posten_sh) <- "+proj=longlat +datum=WGS84"
#////////////////////////////////////////////
st_crs(posten_sh) <- "+proj=longlat +datum=WGS84"
posten_sh <- st_transform(posten_sh, crs = "+proj=longlat +datum=WGS84")
centroids <- st_centroid(posten_sh)
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid, color = "red", size = 2) +
ggtitle("Berlin Postenzahlen Outline with Centroids") +
coord_sf()
st_crs(posten_sh)
st_crs(ortsteilen_sh)
posten_sh
pacman::p_load(sf, ggplot2)
# Read the shapefiles and clean geometries
ortsteilen_sh <- st_read("~/Desktop/R/berlincentroidpop/shapefiles/berlin_ortsteile.shp") |> st_make_valid()
posten_sh <- st_read("~/Desktop/R/berlincentroidpop/postenshapefiles/plz.shp") |> st_make_valid()
c
pacman::p_load(ggplot2, dplyr, tibble,
readxl, conflicted
)
#Importing the excel file
rawdata <- read_excel("~/Desktop/R/berlincentroidpop/popberlin.xlsx",         sheet = "T14")|>
as_tibble()
#Assigning the right column name
for (i in 1:ncol(rawdata)) {
if (i <= 3 | i == 12) {
col_name <- rawdata[2, i]
} else {
col_name <- rawdata[3, i]
}
colnames(rawdata)[i] <- col_name
}
#Removing the first four rows containing columns names
rawdata<- slice(rawdata, -(1:4))
#Removing last row as well since it contains calculations
rawdata <-head(rawdata, -1)
#Renaming
rawdata<- rawdata |> rename(Total=`Ins-\r\ngesamt`,
`65 +`=`65 und\r\nmehr`,
`Weiblich`=`Darunter\r\nweiblich`)
rawdata<- rawdata |>
mutate(across(Total:Weiblich, as.integer))
#Looking what postal code are missing on the maps
rawdatapc <- rawdata$Postleitzahl|> unique() #a set of unique postal code for the rawdata tibble
shapefilepc <- posten_sh$plz |> unique() # same but for the shapefile postal codes
#It seems there were duplicates on both postal codes. Three postal codes are still missing on the rawdata postal codes.
#What code are them?
missing_postal_codes<-  setdiff(shapefilepc,rawdatapc)
missing_posten_sh <- filter(
posten_sh, plz %in% missing_postal_codes)
conflicts_prefer(dplyr::filter)
missing_posten_sh <- filter(
posten_sh, plz %in% missing_postal_codes)
#Since the area covered by those postal codes is very small I can safely ignore them.
ggplot() +
geom_sf(data = missing_posten_sh, size = 1.5, color = "black", fill = "cyan1") +
ggtitle("Missing Population Data For These Postal Codes") +
coord_sf()
#Joining duplicates in the rawdata
rawdata|> filter(duplicated(rawdata$Postleitzahl))
rawdata|> filter(rawdata$Postleitzahl=="10178")
#As the result of this operation I will loose Bezirk column
joined_without_bezirk<- rawdata |>
group_by(Postleitzahl) |>
summarize(across(where(is.numeric), sum))
#I add back the bezirk column
bezirk <- rawdata |>
group_by(Postleitzahl) |>
arrange(desc(Total)) |>
slice(1)|>
ungroup()|>
select(Bezirk)
#The result is a tibble with no duplicated postal codes, the remaining row contains the sum of all the numeric columns of the two neighborhood that shares the same postal code and the name of the neighborhood with the highest population for that postal code.
data <- bind_cols(bezirk, joined_without_bezirk)
average_centroid <- st_centroid(ortsteilen_sh) %>%
summarise(geometry = st_union(geometry)) %>%
st_cast("POINT")
average_centroid
average_centroid <- st_centroid(posten_sh) %>%
summarise(geometry = st_union(geometry)) %>%
st_cast("POINT")
average_centroid
centroids <- st_centroid(posten_sh)
centroids
centroids <- st_centroid(posten_sh)
# Extract X and Y coordinates of centroids
centroid_coords <- st_coordinates(centroids)
centroid_coords
# Sum X and Y coordinates
total_x <- sum(centroid_coords[, "X"])
total_x
total_y <- sum(centroid_coords[, "Y"])
total_y
# Calculate the average X and Y coordinates
num_centroids <- nrow(centroid_coords)
average_x <- total_x / num_centroids
average_x
average_y <- total_y / num_centroids
average_y
average_centroid <- c(average_x, average_y)
print(average_centroid)
average_centroid_sf <- st_point(c(average_x, average_y))
average_centroid_sf
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid_sf, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids") +
coord_sf()
st_crs(posten_sh)
st_crs(posten_sh)
st_crs(average_centroid_sf) <- st_crs(posten_sh)
st_crs(average_centroid_sf)
# Create a data frame with the average centroid coordinates
average_centroid_df <- data.frame(x = average_x, y = average_y)
average_centroid_df
# Convert the data frame to an sf object
average_centroid_sf <- st_as_sf(average_centroid_df, coords = c("x", "y"))
average_centroid_sf
# Set the CRS for average_centroid_sf to match posten_sh
st_crs(average_centroid_sf) <- st_crs(posten_sh)
average_centroid_sf
# Create the ggplot plot
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid_sf, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids") +
coord_sf()
centroids
View(centroids)
View(centroids)
View(data)
View(data)
merge(centroid, data, by.x = "plz", by.y = "Postleizahl", all = FALSE)
merge(centroids, data, by.x = "plz", by.y = "Postleizahl", all = FALSE)
colnames(data)
merge(centroids, data, by.x = "plz", by.y = "Postleitzahl", all = FALSE)
#Let's compute the population-weighted centroid
mergedata<- merge(centroids, data,
by.x = "plz",
by.y = "Postleitzahl", all = FALSE)
View(mergedata)
#idea1 creating a very big tibble with all 3.8 millions rows, one for every person living in Berlin.
bigdata<- mergedata |>
slice(rep(row_number(), my_tibble$Total)) |>
ungroup()
#idea1 creating a very big tibble with all 3.8 millions rows, one for every person living in Berlin.
bigdata<- mergedata |>
slice(rep(row_number(), mergedata$Total)) |>
ungroup()
View(bigdata)
View(bigdata)
#idea1 creating a very big tibble with all 3.8 millions rows, one for every person living in Berlin.
bigdata<- mergedata |>
slice(rep(row_number(), mergedata$Total)) |>
select(geometry)
#idea1 creating a very big tibble with all 3.8 millions rows, one for every person living in Berlin.
bigdata<- mergedata |>
slice(rep(row_number(), mergedata$Total)) |>
select(geometry)|>
ungroup()
View(bigdata)
centroid_coords <- st_coordinates(bigdata)
# Sum X and Y coordinates
total_x <- sum(centroid_coords[, "X"])
total_y <- sum(centroid_coords[, "Y"])
# Calculate the average X and Y coordinates
num_centroids <- nrow(centroid_coords)
average_x <- total_x / num_centroids
average_y <- total_y / num_centroids
average_centroid_df <- data.frame(x = average_x, y = average_y)
# Then I convert the data frame to an sf object
average_centroid_sf <- st_as_sf(average_centroid_df, coords = c("x", "y"))
average_centroid_sf
# Now I assign the missing CRS to match the CRS of posten_sh
st_crs(average_centroid_sf) <- st_crs(posten_sh)
average_centroid_sf
#And finally I can plot it!
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid_sf, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids") +
coord_sf()
#And finally I can plot it!
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid_sf, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids-Weighted by Population") +
coord_sf()
#And finally I can plot it!
ggplot() +
geom_sf(data = posten_sh, size = 1.5, color = "black", fill = "cyan1") +
geom_sf(data = average_centroid_sf, color = "red", size = 3) +
ggtitle("Berlin Neighbors Outline with Centroids Weighted by Population") +
coord_sf()
library(leaflet)
pacman::p_load(ggplot2, dplyr, tibble,
readxl, conflicted,leaflet
)
# Convert to GeoJSON
geojson <- sf::st_write(posten_sh, "geojson")
library(leaflet)
# Convert to GeoJSON
geojson <- sf::st_write(posten_sh, "geojson")
posten_geojson <- geojson_json(posten_sh)
pacman::p_load(ggplot2, dplyr, tibble,
readxl, conflicted,leaflet, geojsonio
)
View(average_centroid_sf)
View(centroids)
proj_crs <- st_crs("+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs")
# Create the point geometry
point_wkt <- "POINT (392529.3 5819187)"
point <- st_as_sfc(point_wkt, crs = proj_crs)
# Transform the point to WGS84 (EPSG:4326)
point_wgs84 <- st_transform(point, crs = st_crs(4326))
# Extract latitude and longitude coordinates
latitude <- st_coordinates(point_wgs84)[2]
longitude <- st_coordinates(point_wgs84)[1]
# Print latitude and longitude
print(latitude)
print(longitude)
proj_crs <- st_crs("+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs")
# Create the point geometry
point_wkt <- "POINT (392529.3 5819187)"
point <- st_as_sfc(point_wkt, crs = proj_crs)
# Transform the point to WGS84 (EPSG:4326)
point_wgs84 <- st_transform(point, crs = st_crs(4326))
# Extract latitude and longitude coordinates
latitude <- st_coordinates(point_wgs84)[2]
longitude <- st_coordinates(point_wgs84)[1]
# Print latitude and longitude
print(latitude)
print(longitude)
# Define the projected CRS of the point
proj_crs <- st_crs("+proj=utm +zone=32 +datum=WGS84 +units=m +no_defs")
# Create the point geometry
point_wkt <- "POINT (392529.3 5819187)"
point <- st_as_sfc(point_wkt, crs = proj_crs)
# Transform the point to WGS84 (EPSG:4326)
point_wgs84 <- st_transform(point, crs = st_crs(4326))
# Extract latitude and longitude coordinates
coordinates <- st_coordinates(point_wgs84)
latitude <- coordinates[2, 2]
longitude <- coordinates[1, 1]
# Print latitude and longitude
print(latitude)
print(longitude)
